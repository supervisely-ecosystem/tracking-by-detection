#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è _legacy –∏–∑ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ nn.tracker
"""

import os
import re
from pathlib import Path

def find_tracker_files(tracker_dir):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ tracker"""
    python_files = []
    
    for root, dirs, files in os.walk(tracker_dir):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                python_files.append(file_path)
    
    return python_files

def fix_legacy_imports_in_file(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç legacy –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∞–π–ª–µ"""
    print(f"Processing: {file_path}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"  ‚ùå Error reading file: {e}")
        return False
    
    original_content = content
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    patterns_to_fix = [
        # –ò–º–ø–æ—Ä—Ç—ã —Å _legacy
        (r'from supervisely\.nn\.tracker\.tracker_legacy import', 'from supervisely.nn.tracker.tracker import'),
        (r'import supervisely\.nn\.tracker\.tracker_legacy', 'import supervisely.nn.tracker.tracker'),
        
        # –ò–º–ø–æ—Ä—Ç—ã bot_sort_legacy
        (r'from supervisely\.nn\.tracker\.bot_sort_legacy', 'from supervisely.nn.tracker.bot_sort_legacy'),  # –û—Å—Ç–∞–≤–ª—è–µ–º bot_sort_legacy –∫–∞–∫ –µ—Å—Ç—å
        (r'import supervisely\.nn\.tracker\.bot_sort_legacy', 'import supervisely.nn.tracker.bot_sort_legacy'),  # –û—Å—Ç–∞–≤–ª—è–µ–º bot_sort_legacy –∫–∞–∫ –µ—Å—Ç—å
        
        # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å _legacy –≤ –ø—É—Ç—è—Ö
        (r'supervisely\.nn\.tracker\.([^.]+)_legacy', r'supervisely.nn.tracker.\1'),
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ supervisely.supervisely –æ–±—Ä–∞—Ç–Ω–æ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
        (r'supervisely\.supervisely\.nn\.tracker', 'supervisely.nn.tracker'),
        
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        (r'from supervisely\.supervisely\.nn\.tracker\.tracker import', 'from supervisely.nn.tracker.tracker import'),
        (r'import supervisely\.supervisely\.nn\.tracker\.tracker', 'import supervisely.nn.tracker.tracker'),
    ]
    
    changes_made = False
    changes_log = []
    
    for pattern, replacement in patterns_to_fix:
        matches = re.findall(pattern, content)
        if matches:
            content = re.sub(pattern, replacement, content)
            changes_made = True
            changes_log.append(f"    Fixed pattern: {pattern} -> {replacement}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è bot_sort_legacy - –ù–ï —É–±–∏—Ä–∞–µ–º _legacy –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
    # –ù–æ —É–±–∏—Ä–∞–µ–º _legacy –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç –≥–¥–µ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
    
    if changes_made:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = file_path + '.backup'
        try:
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(original_content)
            print(f"  üíæ Created backup: {backup_path}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è Warning: Could not create backup: {e}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"  ‚úÖ Fixed imports in file")
            for change in changes_log:
                print(change)
            return True
        except Exception as e:
            print(f"  ‚ùå Error writing file: {e}")
            return False
    else:
        print(f"  ‚úÖ No legacy imports found")
        return False

def fix_specific_known_issues(tracker_dir):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    problematic_files = [
        "bot_sort_legacy/sly_tracker.py",
        "botsort/sly_tracker.py", 
        "__init__.py"
    ]
    
    for rel_path in problematic_files:
        file_path = os.path.join(tracker_dir, rel_path)
        if os.path.exists(file_path):
            print(f"\nüîß Fixing known issue in: {file_path}")
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if "sly_tracker.py" in rel_path:
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç
                    content = content.replace(
                        'from supervisely.supervisely.nn.tracker.tracker import BaseDetection as Detection',
                        'from supervisely.nn.tracker.tracker import BaseDetection as Detection'
                    )
                    content = content.replace(
                        'from supervisely.supervisely.nn.tracker.tracker import BaseTrack, BaseTracker',
                        'from supervisely.nn.tracker.tracker import BaseTrack, BaseTracker'
                    )
                
                if "__init__.py" in rel_path:
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ __init__.py
                    content = re.sub(
                        r'from supervisely\.nn\.tracker\.([^.]+)_legacy import',
                        r'from supervisely.nn.tracker.\1_legacy import',  # –î–ª—è bot_sort_legacy –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        content
                    )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                print(f"  ‚úÖ Fixed specific issues")
                
            except Exception as e:
                print(f"  ‚ùå Error fixing {file_path}: {e}")

def test_imports_after_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("\n" + "="*60)
    print("üß™ TESTING IMPORTS AFTER FIX")
    print("="*60)
    
    try:
        import supervisely as sly
        print("‚úÖ import supervisely - OK")
        
        from supervisely.nn.tracker.tracker import BaseDetection, BaseTracker
        print("‚úÖ import BaseDetection, BaseTracker - OK")
        
        try:
            from supervisely.nn.tracker.botsort.tracker.mc_bot_sort import BoTSORT
            print("‚úÖ import BoTSORT (new) - OK")
        except ImportError as e:
            print(f"‚ùå import BoTSORT (new) failed: {e}")
        
        try:
            from supervisely.nn.tracker.botsort.sly_tracker import BoTTracker
            print("‚úÖ import BoTTracker (new) - OK")
        except ImportError as e:
            print(f"‚ùå import BoTTracker (new) failed: {e}")
            
        try:
            from supervisely.nn.tracker.bot_sort_legacy.sly_tracker import BoTTracker as LegacyBoTTracker
            print("‚úÖ import BoTTracker (legacy) - OK")
        except ImportError as e:
            print(f"‚ùå import BoTTracker (legacy) failed: {e}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç –∏–∑ __init__.py
            from supervisely.nn.tracker import BoTTracker
            print("‚úÖ import BoTTracker from nn.tracker - OK")
        except ImportError as e:
            print(f"‚ùå import BoTTracker from nn.tracker failed: {e}")
        
        print("üéâ Import testing completed!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Basic supervisely import failed: {e}")
        return False

def main():
    print("üîß REMOVING _LEGACY FROM TRACKER IMPORTS")
    print("="*60)
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ tracker
    tracker_dir = "/root/tracking-by-detection/supervisely/supervisely/nn/tracker"
    
    if not os.path.exists(tracker_dir):
        print(f"‚ùå Tracker directory not found: {tracker_dir}")
        return
    
    print(f"üìÅ Working in: {tracker_dir}")
    
    # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    python_files = find_tracker_files(tracker_dir)
    print(f"üìÑ Found {len(python_files)} Python files")
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º legacy –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ
    print("\n" + "-"*50)
    print("FIXING LEGACY IMPORTS IN FILES:")
    print("-"*50)
    
    total_fixed = 0
    for file_path in python_files:
        if fix_legacy_imports_in_file(file_path):
            total_fixed += 1
    
    print(f"\nüìä Fixed legacy imports in {total_fixed} files")
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    print("\n" + "-"*50)
    print("FIXING SPECIFIC KNOWN ISSUES:")
    print("-"*50)
    
    fix_specific_known_issues(tracker_dir)
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    test_imports_after_fix()
    
    print("\n" + "="*60)
    print("üéØ SUMMARY:")
    print(f"‚úÖ Processed {len(python_files)} files")
    print(f"‚úÖ Fixed legacy imports in {total_fixed} files")
    print("‚úÖ Applied specific fixes for known issues")
    print("\nYou can now try running your tracking script again!")
    print("="*60)

if __name__ == "__main__":
    main()